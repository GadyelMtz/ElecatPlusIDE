/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elecatpluside;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JTextPane;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author zapat
 */
public class IDE extends javax.swing.JFrame {

    String rutaDocumento = System.getProperty("user.dir") + "\\" + "Archivo.cato";
    private boolean guardado = false;
    File f;
    PonerNumeroDeLinea p;
    
    public IDE() {
        initComponents();
        inicializar();
        colors();
        if ((f = new File(rutaDocumento)).exists())
        cargarDocumento(f);
        else
            this.setTitle("Archivo nuevo(*) - ElecatPlus IDE 1.0");
        
        
        // Crear un DocumentListener para el JTextPane
        txtPaneIDE.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                escribir(f);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                escribir(f);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // No es relevante para un JTextPane simple de texto
            }
        });
        
        // Agregar un KeyListener para detectar la tecla "Enter"
        txtPaneIDE.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    escribir(f);
                    guardado=false;
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                escribir(f);
                guardado=false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPaneIDE = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextPane();
        lblSalida = new javax.swing.JLabel();
        lblCaretPosition = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblGuardar = new javax.swing.JLabel();
        lblGuardarComo = new javax.swing.JLabel();
        lblAbrir = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ELECAT.png"))); // NOI18N

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        txtPaneIDE.setBackground(new java.awt.Color(0, 0, 0));
        txtPaneIDE.setBorder(null);
        txtPaneIDE.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPaneIDE.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                actualizarLabel(evt);
            }
        });
        jScrollPane1.setViewportView(txtPaneIDE);

        txtOutput.setEditable(false);
        txtOutput.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txtOutput.setText("En este espacio se mostrará la salida del compilador.");
        txtOutput.setToolTipText("");
        jScrollPane2.setViewportView(txtOutput);

        lblSalida.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        lblSalida.setForeground(new java.awt.Color(255, 255, 102));
        lblSalida.setText("Salida");

        lblCaretPosition.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblCaretPosition.setForeground(new java.awt.Color(255, 255, 255));
        lblCaretPosition.setText("Posición del cursor 1:0");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/compilar.png"))); // NOI18N
        jLabel1.setToolTipText("Compilar");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar.png"))); // NOI18N
        lblGuardar.setToolTipText("Guardar");
        lblGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGuardarMouseClicked(evt);
            }
        });

        lblGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardarcomo.png"))); // NOI18N
        lblGuardarComo.setToolTipText("Guardar como");
        lblGuardarComo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblGuardarComo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblGuardarComoMouseClicked(evt);
            }
        });

        lblAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/abrir.png"))); // NOI18N
        lblAbrir.setToolTipText("Abrir");
        lblAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAbrirMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(679, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblLogo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAbrir)
                        .addGap(18, 18, 18)
                        .addComponent(lblGuardarComo)
                        .addGap(18, 18, 18)
                        .addComponent(lblGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(80, 80, 80))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lblSalida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCaretPosition)
                .addGap(65, 65, 65))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(lblGuardar)
                    .addComponent(lblGuardarComo)
                    .addComponent(lblAbrir))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSalida)
                    .addComponent(lblCaretPosition))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarLabel(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_actualizarLabel
        escribir(f);
    }//GEN-LAST:event_actualizarLabel

    private void lblGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGuardarMouseClicked
        guardar(f);
    }//GEN-LAST:event_lblGuardarMouseClicked

    private void lblGuardarComoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGuardarComoMouseClicked
        guardarComo();
    }//GEN-LAST:event_lblGuardarComoMouseClicked

    private void lblAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAbrirMouseClicked
        abrir();
    }//GEN-LAST:event_lblAbrirMouseClicked

     private void guardarComo() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Cato (*.cato)", "cato");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File(rutaDocumento));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.getAbsolutePath().endsWith(".cato")) {
                file = new File(file.getAbsolutePath() + ".cato");
            }
            rutaDocumento = file.getAbsolutePath();
            guardar(file);
            f = file;
            this.setTitle(file.getName().replace(".cato", "")+" - ElecatPlus IDE 1.0");
        }
    }
     
     private void guardar(File file) {
        try (PrintWriter escritor = new PrintWriter(rutaDocumento)) {
            escritor.println(txtPaneIDE.getText());
            // Puedes escribir más contenido si lo deseas
            escritor.flush(); // Asegúrate de guardar los cambios
            this.setTitle(file.getName().replace(".cato", "")+" - ElecatPlus IDE 1.0");
        } catch (IOException e) {
            e.printStackTrace(); // Manejo de errores
        }
        guardado = true;
        System.out.println("Guardado...");
    }
     
    private void abrir() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Cato (*.cato)", "cato");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File(rutaDocumento));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            cargarDocumento(file);
            this.setTitle(file.getName().replace(".cato", "")+" - ElecatPlus IDE 1.0");
            p = new PonerNumeroDeLinea(txtPaneIDE);
            f = file;
        }
    }
    
    private void cargarDocumento(File file) {
        rutaDocumento = file.getAbsolutePath();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
            // Cargar el contenido en el JTextPane
            txtPaneIDE.setText(content.toString());
            this.setTitle(file.getName().replace(".cato", "")+" - ElecatPlus IDE 1.0");
            System.out.println("Archivo cargado correctamente.");
        } catch (IOException e) {
            System.out.println("Error al cargar el archivo: " + e.getMessage());
        }
    }
    
    private void escribir(File file) {
                 // Obtener la posición del caret
                int caretPosition = txtPaneIDE.getCaretPosition();
                // Obtener el elemento de texto donde se encuentra el caret
                Element root = txtPaneIDE.getDocument().getDefaultRootElement();
                int lineNumber = root.getElementIndex(caretPosition) + 1; // Sumar 1 para mostrar renglones basados en 1
                
                // Calcular la columna
                int columnNumber = caretPosition - root.getElement(lineNumber - 1).getStartOffset(); // Sumar 1 para mostrar columnas basadas en 1
                
                lblCaretPosition.setText("Posición del cursor "+lineNumber + ":" + columnNumber);
                if(guardado==false)
                    this.setTitle(file.getName().replace(".cato", "")+"* - ElecatPlus IDE 1.0");
    }
    
     //METODO PARA ENCONTRAR LAS ULTIMAS CADENAS
    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            //  \\W = [A-Za-Z0-9]
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    //METODO PARA ENCONTRAR LAS PRIMERAS CADENAS 
    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }

    //METODO PARA PINTAS LAS PALABRAS RESEVADAS
    private void colors() {

        final StyleContext cont = StyleContext.getDefaultStyleContext();

        //COLORES 
        final AttributeSet attred = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255,77,59));
        final AttributeSet attgreen = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(157, 220, 158));
        final AttributeSet attblue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(41, 243, 226));
        final AttributeSet attwhite = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 255, 255));
        final AttributeSet attyellow = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 222, 89));
        final AttributeSet attorange = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 165, 59));
        

        //STYLO 
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if (before < 0) {
                    before = 0;
                }
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;

                while (wordR <= after) {
                    if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                            //Componentes
                        if (text.substring(wordL, wordR).matches("(\\W)*(LED|DISPLAY_LCD|SERVO|SENSOR_ULTRASONICO|MOTOR|FOTO_RESISTENCIA|BUZZER|"
                                + "SERVO|SIETE_SEGMENTOS|BOTON|FUENTE|JOYSTICK)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attblue, false);
                            //Estructuras de control
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(SI|SINO|ELEGIR|OPCION|POR DEFECTO|"
                                + "REPETIR|MIENTRAS|HASTA|POR)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attgreen, false);
                            //Tipo de dato
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(DECIMAL|ENTERO|CARACTER|CADENA|BOOLEANO|VERDADERO|FALSO)")){
                            setCharacterAttributes(wordL, wordR - wordL, attorange, false);
                            //Acciones
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(PRESIONA|VARIA|SUENA|ENCIENDE|APAGA|ESCRIBE|GIRA|ACCION)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attred, false);
                        } else if (text.substring(wordL, wordR).matches("(\\W)* (HOLA$)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attyellow, false);
                        } else {
                            setCharacterAttributes(wordL, wordR - wordL, attwhite, false);
                        }
                        wordL = wordR;

                    }
                    wordR++;
                }
            }

            public void remove(int offs, int len) throws BadLocationException {
                super.remove(offs, len);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                if (before < 0) {
                    before = 0;
                }
            }
        };

        JTextPane txt = new JTextPane(doc);
        String temp = txtPaneIDE.getText();
        txtPaneIDE.setStyledDocument(txt.getStyledDocument());
        txtPaneIDE.setText(temp);
    }
    
    
    
    
    int caretPos;
    private void inicializar(){
        p = new PonerNumeroDeLinea(txtPaneIDE);
        jScrollPane1.setRowHeaderView(p);
        txtPaneIDE.setCaretColor(Color.WHITE);
        this.setBackground(Color.BLACK);
        caretPos = txtPaneIDE.getCaretPosition();
        
        this.setLocationRelativeTo(null);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAbrir;
    private javax.swing.JLabel lblCaretPosition;
    private javax.swing.JLabel lblGuardar;
    private javax.swing.JLabel lblGuardarComo;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblSalida;
    private javax.swing.JTextPane txtOutput;
    private javax.swing.JTextPane txtPaneIDE;
    // End of variables declaration//GEN-END:variables
}
